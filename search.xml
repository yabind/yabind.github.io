<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[case判断]]></title>
    <url>%2Fshell%2Fshell%E5%88%A4%E6%96%AD%2F</url>
    <content type="text"><![CDATA[CASE判断 case格式 123456789101112131415case VARIABLE NAME in value1) COMMAND ;; value2) COMMAND ;; *) COMMAND ;;esac在case程序中，可以在条件中使用 | ，表示或的意思，比如 2|3) COMMAND ;; 示例 1234567891011121314151617181920212223242526272829303132333435363738394041#!/bin/bashread -p "Please input a number: " nif [[ -z "$n" ]]; then echo "Please input a number." exit 1ifn1=`echo $n | sed 's/[0-9]//g'`if [[ ! -z $n1 ]]; then # [[ -n $1 ]] echo 'Please input a number.' exit 1# elfi [[ $n -lt 0 ]] || [[ $n -gt 100 ]]; then# echo 'The number range is 0-100.'# exit 1fifi [[ $n -ge 0 ]] &amp;&amp; [[ $n -lt 60 ]]; then tag=1 elfi [[ $n -ge 60 ]] &amp;&amp; [[ $n -lt 80 ]]; then tag=2 elfi [[ $n -ge 80 ]] &amp;&amp; [[ $n -lt 90 ]]; then tag=3 elfi [[ $n -ge 90 ]] &amp;&amp; [[ $n -le 100 ]]; then tag=4 else tag=0ficase $tag in 1) echo 'not ok' ;; 2) echo 'ok' ;; 3|4) echo 'very ok' ;; 0) echo 'The number range is 0-100' ;;esac]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Seafile-开源企业私有网盘升级]]></title>
    <url>%2FSeafile%2FSeafile%E5%8D%87%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[前言 ​ 本人当时搭建seafile的时候版本号是6.1.1现在版本更新到了6.3.4了，打算升级一下。文章脑袋思路不是特别有思路，写的不好希望理解。 ​ 简述一下：之前的seafile服务是搭建在192.168.1.102上的/home/seafile目录下的，之前的数据MySQL并没有放在这个机器上而是放在了192.168.1.103上。 新机器上部署原有环境（192.168.1.108） 在新机器上拉去之前的版本软件和数据 12345678910rsync -aP --exclude '*data' root@192.168.1.102:/home/seafile /home/cd /home/seafile/rm -rf ccnet/rm seafile-server-latest# 这个目录是一个软连接目录删除软连接目录的时候千万记得不要再软连接目录的后面加/不然删除的是真实目录下的所有文件# 注意：删除这两个文件只为了在搭建环境的时候不出错，出现的错误提示我会放在下面cd seafile-server-6.1.1./setup-seafile-mysql.sh# 运行安装脚本并回答预设问题 新机器上搭建原来seafile环境的常见错误 提示缺少依赖环境，根据提示运行命令 ​ 上面我们使用rm命令删除ccnet如果你删除就会提示下面错误 ​ 如果不删除seafile-server-latest链接文件会提示下面的错误 命令./setup-seafile-mysql.sh回答的问题 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147[root@localhost seafile-server-6.1.1]# ./setup-seafile-mysql.sh Checking python on this machine ... Checking python module: setuptools ... Done. Checking python module: python-imaging ... Done. Checking python module: python-mysqldb ... Done.-----------------------------------------------------------------This script will guide you to setup your seafile server using MySQL.Make sure you have read seafile server manual at https://github.com/haiwen/seafile/wikiPress ENTER to continue-----------------------------------------------------------------What is the name of the server? It will be displayed on the client.3 - 15 letters or digits# 输入之前seafile的名字[ server name ] seafile What is the ip or domain of the server?For example: www.mycompany.com, 192.168.1.101# 输入本机IP地址[ This server's ip or domain ] 192.168.1.108Where do you want to put your seafile data?Please use a volume with enough free space# 存储文件确定放在提示的目录里面吗？是直接回车[ default "/home/seafile/seafile-data" ] Which port do you want to use for the seafile fileserver?# 上下传文件要使用那个端口，默认直接回车[ default "8082" ] -------------------------------------------------------Please choose a way to initialize seafile databases:-------------------------------------------------------[1] Create new ccnet/seafile/seahub databases[2] Use existing ccnet/seafile/seahub databases# 先选择1创建新的数据库不要使用原来的[ 1 or 2 ] 1What is the host of mysql server?# 输入之前数据库的IP地址[ default "localhost" ] 192.168.1.103From which hosts could the mysql account be used?# 允许那些用户可以访问数据库[ default "%" ] What is the port of mysql server?# 确定MySQL的端口[ default "3306" ] What is the password of the mysql root user?# 输入MySQL root用户的密码[ root password ] verifying password of user root ... doneEnter the name for mysql user of seafile. It would be created if not exists.[ default "seafile" ] Enter the password for mysql user "seafile":# 输入MySQL的用户名的密码[ password for seafile ] verifying password of user seafile ... doneEnter the database name for ccnet-server:# 创建的库名，默认直接回车[ default "ccnet-db" ] Enter the database name for seafile-server:# 创建的库名，默认直接回车[ default "seafile-db" ] Enter the database name for seahub:# 创建的库名，默认直接回车[ default "seahub-db" ] ---------------------------------This is your configuration---------------------------------# 确定输入的信息是否有错，有错按ctrl+c取消再次从新输入 server name: seafile server ip/domain: 192.168.1.93 seafile data dir: /home/seafile/seafile-data fileserver port: 8082 database: create new ccnet database: ccnet-db seafile database: seafile-db seahub database: seahub-db database user: seafile---------------------------------Press ENTER to continue, or Ctrl-C to abort---------------------------------Generating ccnet configuration ...doneSuccessly create configuration dir /home/seafile/ccnet.Generating seafile configuration ...Done.doneGenerating seahub configuration ...----------------------------------------Now creating seahub database tables ...----------------------------------------creating seafile-server-latest symbolic link ... done-----------------------------------------------------------------Your seafile server configuration has been finished successfully.-----------------------------------------------------------------# 服务的启动、关闭和重启run seafile server: ./seafile.sh &#123; start | stop | restart &#125;run seahub server: ./seahub.sh &#123; start &lt;port&gt; | stop | restart &lt;port&gt; &#125;-----------------------------------------------------------------If you are behind a firewall, remember to allow input/output of these tcp ports:-----------------------------------------------------------------port of seafile fileserver: 8082port of seahub: 8000When problems occur, Refer to https://github.com/haiwen/seafile/wikifor information. 启动seafile服务 123456789101112131415161718192021222324252627282930313233343536373839[root@localhost seafile-server-6.1.1]# ./seafile.sh start[05/22/19 06:53:14] ../common/session.c(132): using config file /home/seafile/conf/ccnet.confStarting seafile server, please wait ...Seafile server startedDone.[root@localhost seafile-server-6.1.1]# ./seahub.sh startLC_ALL is not set in ENV, set to en_US.UTF-8Starting seahub at port 8000 ...----------------------------------------It's the first time you start the seafile server. Now let's create the admin account----------------------------------------What is the email for the admin account?# 输入自己的邮箱地址[ admin email ] open@163.comWhat is the password for the admin account?# 输入密码-自定义[ admin password ] Enter the password again:[ admin password again ] ----------------------------------------Successfully created seafile admin----------------------------------------Seahub is startedDone. 注意：到这里就已经算是安装好之前的环境了，你可以使用http://ip:8000访问看看是否成功。 备份数据并回复新的数据（192.168.1.103） 停止seafile服务 123cd /home/seafile/seafile-server-6.1.1./seafile.sh stop./seahub.sh stop 备份原来的数据库 123mysqldump -uroot -pPasswd lod-ccnet &gt; /tmp/ccnet.sqlmysqldump -uroot -pPasswd lod-seahub &gt; /tmp/seahub.sqlmysqldump -uroot -pPasswd lod-seafile &gt; /tmp/seafile.sql 恢复新的数据库 123mysql -uroot -pPasswd ccnet-db &lt; /tmp/ccnet.sqlmysql -uroot -pPasswd seahub-db &lt; /tmp/seahub.sqlmysql -uroot -pPasswd seafile-db &lt; /tmp/deafile.sql 安装和配置Nginx(192.168.1.108) 安装依赖的包 123456789101112131415161718192021222324cd /usr/local/src/yum install -y gcc gcc-c++ autoconf automake pcre pcre-devel openssl* zlib* libtoolwget https://github.com/jemalloc/jemalloc/releases/download/5.1.0/jemalloc-5.1.0.tar.bz2tar jxvf jemalloc-5.1.0.tar.bz2cd jemalloc-5.1.0./configure --prefix=/usr/local/jemallocmake &amp;&amp; make installuseradd -s /sbin/nologin -M nginxcd ../tar xzf tengine-2.3.0.tar.gz # 把tengine-2.3.0.tar.gz包上传到/usr/local/src/cd tengine-2.3.0./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-pcre --with-http_ssl_module --with-jemalloc=/usr/local/src/jemalloc-5.1.0/ --with-http_gzip_static_module --with-http_realip_module --with-http_stub_status_module --with-http_concat_module # 如果提示没有--with-http_concat_module模块可以不要make &amp;&amp; make install 修改nginx的配置文件 12cd /usr/local/nginx/conf/vim nginx.conf= 删除之前的文件内容写入下面的内容 1234567891011121314151617181920212223242526272829303132333435363738394041user nginx;worker_processes auto;pid logs/nginx.pid;events &#123; worker_connections 768; # multi_accept on;&#125;http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include mime.types; default_type application/octet-stream; client_max_body_size 100m; ## # Logging Settings ## access_log logs/access.log; error_log logs/error.log; include sites-enable/*;&#125; 12mkdir sites-enablevim default 写入下面的内容 注意：此处的配置是原来的配置，之前的版本是支持 ./seahub.sh start-fastcgi 启动服务。现在测试阶段配置原来的配置文件。你也可以不用测试直接使用下面的配置文件。 123456789101112131415161718192021222324252627282930313233343536373839server &#123; listen 80; server_name localhost; proxy_set_header X-Forwarded-For $remote_addr; location / &#123; fastcgi_pass 127.0.0.1:8000; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_script_name; fastcgi_param SERVER_PROTOCOL $server_protocol; fastcgi_param QUERY_STRING $query_string; fastcgi_param REQUEST_METHOD $request_method; fastcgi_param CONTENT_TYPE $content_type; fastcgi_param CONTENT_LENGTH $content_length; fastcgi_param SERVER_ADDR $server_addr; fastcgi_param SERVER_PORT $server_port; fastcgi_param SERVER_NAME $server_name; fastcgi_param REMOTE_ADDR $remote_addr; access_log logs/seahub.access.log; error_log logs/seahub.error.log; &#125; location /seafhttp &#123; rewrite ^/seafhttp(.*)$ $1 break; proxy_pass http://127.0.0.1:8082; client_max_body_size 0; proxy_connect_timeout 36000s; proxy_read_timeout 36000s; proxy_request_buffering off; &#125; location /media &#123; root /home/seafile/seafile-server-latest/seahub; &#125;&#125; 修改nginx的default配置文件 注意：升级完成之后 ./seahub.sh 是不在支持 fastcgi 方式启动的。修改完成文件之后可以直接使用 ./seafile.sh start 启动 1234567891011121314151617181920212223242526272829303132333435server &#123; listen 80; server_name localhost; proxy_set_header X-Forwarded-For $remote_addr; location / &#123; proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_read_timeout 1200s; # used for view/edit office file via Office Online Server client_max_body_size 0; access_log logs/seahub.access.log; error_log logs/seahub.error.log; &#125; location /seafhttp &#123; rewrite ^/seafhttp(.*)$ $1 break; proxy_pass http://127.0.0.1:8082; client_max_body_size 0; proxy_connect_timeout 36000s; proxy_read_timeout 36000s; proxy_request_buffering off; &#125; location /media &#123; root /home/seafile/seafile-server-latest/seahub; &#125;&#125; 开始升级seafile。具体方法请查看官方文档 ：升级 拉取数据（192.168.1.108） 把原有的文件拉回到新的机器上。 1rsync -aP root@192.168.1.205:/home/seafile/*data /home/seafile/ 修改配置文件 /home/seafile/conf/seahub_settings.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*- coding: utf-8 -*-SECRET_KEY = "gss=bf%!(g9t))i(pbkta4s8#$33v8a71#_t+g9)o6h20f-_fy"DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'seahub-db6', 'USER': 'seafile', 'PASSWORD': 'seafile', 'HOST': '192.168.1.208', 'PORT': '3306' &#125;&#125;##下面的这些东西是设置邮件服务器。需要填写对EMAIL_USE_TLS = FalseEMAIL_HOST = 'smtp.mxhichina.com' # smpt 服务器EMAIL_HOST_USER = 'opadmin@51signing.com' # 用户名和域名EMAIL_HOST_PASSWORD = '@bjzqkj2015col!' # 密码EMAIL_PORT = '25'DEFAULT_FROM_EMAIL = EMAIL_HOST_USERSERVER_EMAIL = EMAIL_HOST_USER###the below is 设置用户是否能注册等信息的ENABLE_SIGNUP = True ####是否开启注册ACTIVATE_AFTER_REGISTRATION = True ###注册后是否立即激活SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True ####管理员新增用户后是否给用户发送邮件SEND_EMAIL_ON_RESETTING_USER_PASSWD = True ###管理员重置用户密码后是否给用户发送邮件LOGIN_ATTEMPT_LIMIT = 3 ###用户输入密码错误次数超过改设置后，显示验证码USER_PASSWORD_MIN_LENGTH = 6 ###用户密码最小长度FORCE_PASSWORD_CHANGE = True ####管理员增加用户，第一次登录强制修改密码ENABLE_WIKI = True #是否开启个人wiki# 是否使用 pdf.js 来在线查看文件. 默认为 `True`USE_PDFJS = TrueFILE_PREVIEW_MAX_SIZE = 30 * 1024 * 1024 ##默认查看文档大小FILE_SERVER_ROOT = 'http://192.168.1.108/seafhttp'TEXT_PREVIEW_EXT = """ac, am, bat, c, cc, cmake, cpp, cs, css, diff, el, h, html,htm, java, js, json, less, make, org, php, pl, properties, py, rb,scala, script, sh, sql, txt, text, tex, vi, vim, xhtml, xml, log, csv,groovy, rst, patch, go, docx, doc""" ​ wiki的配置文件内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445server &#123; listen 81; server_name localhost;# location / &#123;# root /var/www/html;# index index.html index.htm;# &#125; #error_page 404 /404.html;# error_page 500 502 503 504 /50x.html;# location = /50x.html &#123;# root html;# &#125;# location ~*^/dokuwiki/.*$ &#123; #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。# #root path; #根目录# #index vv.txt; #设置默认页# proxy_pass http://test; #请求转向mysvr 定义的服务器列表# #deny 127.0.0.1; #拒绝的ip# #allow 172.18.5.54; #允许的ip # &#125; proxy_set_header X-Forwarded-For $remote_addr;location / &#123; root html; index index.php index.html index.htm;&#125;location ~ \.php$ &#123; root /usr/local/nginx/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php;# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params;&#125;&#125; 注意：完成之后去前段页面的 系统设置 -&gt; 设置 -&gt; FILE_SERVER_ROOT 里面把IP地址改成本机的]]></content>
      <categories>
        <category>Seafile</category>
      </categories>
      <tags>
        <tag>Seafile升级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Zabbix监控软件]]></title>
    <url>%2FLinux%E9%AB%98%E7%BA%A7%2F%E5%AE%89%E8%A3%85zabbix%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Zabbix监控介绍 C/S架构，基于C++开发，监控中心支持web界面配置和管理 单server节点可以支持上万台客户端 最新版本4.0，官方文档：Zabbix官网 Zabbix包括5个组件 zabbix-server监控中心，接收客户端上报信息，负责配置、统计、操作数据 数据存储 存放数据，比如mysql web界面 也叫web UI，在web界面下操作配置zabbix简单易用的主要原因 zabbix-proxy 可选组件，它可以代替zabbix-server的功能，减轻server的压力 zabbix-agent 客户端软件，负责采集各个监控服务或者项目的数据，并上报 Zabbix监控流程图zabbix-release-3.2-1.el7.noarch.rpm 安装Zabbix上（服务端配置） 官网下载地址 阿铭在下载的时候地址是zabbix的index 123wget repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpmrpm -ivh zabbix-release-3.2-1.el7.noarch.rpm #首先我们下载了zabbix的release的rpm包，然后安装zabbix的yum源仓库yum install -y zabbix-agent zabbix-get zabbix-server-mysql zabbix-web zabbix-web-mysql 会连带安装httpd和php 如果MySQL之前没有安装的话，需要根据lamp那一章的MySQL安装方法安装MySQL。一样也可以是使用yum安装mysql和mariadb vim /etc/my.cnf //需要增加配置 1character_set_server = utf8 重启MySQL服务后，进入MySQL命令行 1234#创建zabbix库create database zabbix character set utf8;#在创建用户grant all on zabbix.* to &apos;zabbix&apos;@&apos;127.0.0.1&apos; identified by &apos;guo123456&apos;; //(生产环境中如果为了提高效率你可以吧MySQL单装一台服务器)创建的用户IP地址为来源IP 导入数据 123cd /usr/share/doc/zabbix-server-mysql-3.2.7gzip -d create.sql.gzmysql -uroot -pgaoyidi zabbix &lt; create.sql 123456systemctl enable httpdsystemctl enable zabbix-serverchkconfig nginx offps -ef|grep zabbix //查看一下进程netstat -lntp zabbix //查看一下坚挺的端口less /var/log/zabbix/zabbix_server.log //zabbix错误日志路径 12345678910vim /etc/zabbix/zabbix_server.conf#搜索DBHost在#DBhost=localhost下面增加DBHost=127.0.0.1#搜索DBName在DBName=zabbix定义用户为zabbix(这里正好是默认的)#搜索DBPassword在DBUser=zabbix下面增加DBPassword=guo123456systemctl start zabbix-serversystemctl enable zabbix-servernetstat -lntp|grep zabbix //查看监听端口#浏览器访问http://ip/zabbinx web界面下面的配置zabbix#用户名Admin 密码zabbix#进入后台第一件事情就是修改密码 在浏览器里面输入IP/zabbix 点击Next step 是ok的就不用管出现fail的需要修改配置文件 这里出现的文件错误是让你设置时区 1234vim /etc/php.ini#搜索timezoen在;date.timezone = 增加date.timezone = Asia/Shanghaisystemctl restart httpd#重启服务之后在浏览器里面刷新 创建完成之后就是登入，默认用户是Admin，默认密码是zabbix。登入之后第一件事就是修改用户密码 点击Administration -&gt;点击Users -&gt; 点击Admin用户 -&gt; 点击Password处的Change password -&gt; 输入新的密码 ，你也可以修改中文语言点击Language选择Chinese （zh_CN），建议大家使用英文 -&gt; 点击update保存 下图就是zabbix的web界面 下 （客户端配置） 在客户端上需要下载zabbix的yum源 123456789wget repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpmrpm -ivh zabbix-release-3.2-1.el7.noarch.rpmyum install -y zabbix-agentvim /etc/zabbix/zabbix_agentd.conf //修改如下配置#搜索Server=127.0.0.1修改成Server=192.168.107.101 //定义服务端的ip（被动模式）#搜索ServerActive=127.0.0.1修改成ServerActive=192.168.107.101 //定义服务端ip（主动模式）#搜索Hostname=Zabbix server修改成Hostname=guo-123 //这是自定义的主机名，一会还需要在web界面下设置同样的主机名systemctl start zabbix-agentsystemctl enable zabbix-agent 主动模式和被动模式 主动或被动是相对客户端来讲的 被动模式：服务端会主动连接客户端获取监控项目数据，客户端被动地接受连接，并把监控信息传递给服务端 主动模式：客户端会主动吧监控数据汇报给服务端，服务端只负责接受即可 当客户端数量非常多时，建议使用主动模式，这样可以降低服务为的压力 服务端有公网ip。客户端只用内网ip，但却能连接外网，这种场景适合主动模式 忘记Admin用户的密码怎么做 进入MySQL命令行，选择zabbix库 1mysql -uroot -pgaoyadi 123use zabbix;update users set passwd=md5(&apos;newpasswd&apos;) where alias=&apos;Admin&apos;;#这样就可以修改Admin用户的密码]]></content>
      <categories>
        <category>Linux高级</category>
      </categories>
      <tags>
        <tag>Linux监控</tag>
      </tags>
  </entry>
</search>
