<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[私有化部署-自动化安装FastDFS应用]]></title>
    <url>%2FFastDFS%E5%BA%94%E7%94%A8%2F%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85FastDFS%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[上传文件所有需要的软件已经整理成了一个包。把包上传到每台机上的/usr/local/src/目录下 12345678910111213[root@localhost ~]# cd /usr/local/src/[root@localhost src]# lsFastDFS-install.tar.gz[root@localhost src]# tar -zxvf FastDFS-install.tar.gz ./FastDFS/./FastDFS/ngx_cache_purge-2.3.tar.gz./FastDFS/installFastDFS.sh./FastDFS/fastdfs-nginx-module_v1.16.tar.gz./FastDFS/FastDFS_v5.05.tar.gz./FastDFS/nginx-1.6.2.tar.gz./FastDFS/libfastcommon-master.zip[root@localhost src]# lsFastDFS FastDFS-install.tar.gz 选择需要安装的服务1234567891011121314151617181920212223[root@localhost src]# cd FastDFS/[root@localhost FastDFS]# lsfastdfs-nginx-module_v1.16.tar.gz installFastDFS.sh nginx-1.6.2.tar.gzFastDFS_v5.05.tar.gz libfastcommon-master.zip ngx_cache_purge-2.3.tar.gz[root@localhost FastDFS]# sh installFastDFS.sh ***Reminder: Install only tracker [ Y/N ]:n Install only storage [ Y/N ]:n Install tracker and storage [ Y/N ]:y*** Several groups are defined for this service [ 1 ro 2 ... ]:2*** Which group is the local service [ 1 ro 2 ... ]:2*** Enter the IP of all trackersFormat [Tracker_ip]:ip1;ip2;ip3;ipn [Tracker_ip]:192.168.1.92;192.168.1.93;192.168.1.94;192.168.1.95 启动服务123456789[root@localhost src]# /etc/init.d/fdfs_trackerd startStarting fdfs_trackerd (via systemctl): [ 确定 ][root@localhost src]# /etc/init.d/fdfs_storaged startStarting fdfs_storaged (via systemctl): [ 确定 ][root@localhost src]# ln -s /home/fastdfs/storage/data/ /home/fastdfs/storage/data/M00[root@localhost src]# ll /home/fastdfs/storage/data/M00lrwxrwxrwx 1 root root 27 5月 13 17:17 /home/fastdfs/storage/data/M00 -&gt; /home/fastdfs/storage/data/[root@localhost src]# /usr/local/nginx/sbin/nginx ngx_http_fastdfs_set pid=9017 注意：建议优先启动每台的tracker服务，在启动每台的storage服务。这样不会出现在启动storage的时候出现服务无法监听23000端口的情况 上传文件测试1/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /usr/local/src/FastDFS_v5.05.tar.gz 浏览器访问1http://storage-ip:888/上传测试文件返回的值 ​ 后记：如果服务器不可以正常启动或者不可以正常使用请回到之前《私有化部署-安装FastDFS应用》这篇文章查看你的配置文件否正确。 软件下载地址放在本文的下方的评论区]]></content>
      <categories>
        <category>FastDFS应用</category>
      </categories>
      <tags>
        <tag>FastDFS自动化安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell判断]]></title>
    <url>%2Fshell%2Fshell%E5%88%A4%E6%96%AD%2F</url>
    <content type="text"><![CDATA[shell脚本中的变量 当脚本中使用某个字符串较频繁并且字符串长度很长时就应该使用变量代替 使用条件语句时，常使用变量 123if [[ condition ]]; then #statementsfi 引用某个命令的结果时，用变量替代 1n=`wc -l 1.txt` 写和用户交互的脚本时，变量也是必不可少的 read -p “lnput anumber:” n; echo $n 如果没写这个n，可以直接使用 $REPLY 内置变量 $0,$1,$2… $0表示脚本本身，$1第一个参数，$2第二个… $#表示参数个数 数学运算 a=1; b=2; c=(($a+$b)) 或者 $[$a+$b] shell中的逻辑判断 格式一 123if [[ 条件 ]]; then 语句fi 格式二 12345if [[ 条件 ]]; then 语句else 语句fi 格式三 1234567if [[ ... ]]; then ...elif ... else ...fi 逻辑判断表达式： 1234567if [[ $a -gt $b ]];if [[ $a -lt 5 ]];if [[ $b -eq 10 ]];等-gt(&gt;); -lt(&lt;); -ge(&gt;=); -le(&lt;=); -eq(==); -ne(!=) 注意到处都是空格可以使用 &amp;&amp; || 结合多个条件if [[ $a -gt 5 ]]&amp;&amp;[[ $a -lt 10 ]]; then 逻辑并if [[ $b -gt 5 ]]||[[ $b -lt 3 ]]; then 逻辑或 if判断文件、目录属性1234567891011[[ -f file ]] 判断是否是普通文件、且存在[[ -d file ]] 判断是否是目录、且存在[[ -e file ]] 判断文件或目录是否存在[[ -r file ]] 判断文件是否可读[[ -w file ]] 判断文件是否可写[[ -x file ]] 判断文件是否可执行[ -f/-d $f ] &amp;&amp; rm -f $f 文件/目录是否存在，存在执行删除[ -f/-d $f ] || touch $f 文件/目录是否存在，不存在执行创建# 注意：取反就在方括号的最前面加上 ！ 就可以了 if判断的一些特殊用法1234567891011if [[ -z "$a" ]]# 这个表示当变量a的值为空时会怎么样if [[ -n "$a" ]]# 表示当变量a的值不为空if grep -q '123' 1.txt; then# 表示如果1.txt中含有'123'的行时会怎么样if [[ ! -e file ]]; then# 表示文件不存在时会怎么样if [[ $a -lt 1 ]]; then# 当变量a小于1时会怎么样# 注意：[]中不能使用&gt;、&lt;、==、!=、&gt;=、&lt;=这样的符号 注意： []中不能使用&gt;、&lt;、==、!=、&gt;=、&lt;=这样的符号,一个 = 是赋值 -z 或者 -n都不能作用在文件上，只能作用在变量上 ! -z EQUATE -n 、! -n EQUATE -z if grep -q ‘123’ 1.txt; then 取反为：if ! grep -q ‘123’ 1.txt; then case判断 case格式 123456789101112131415case VARIABLE NAME in value1) COMMAND ;; value2) COMMAND ;; *) COMMAND ;;esac在case程序中，可以在条件中使用 | ，表示或的意思，比如 2|3) COMMAND ;; 示例 1234567891011121314151617181920212223242526272829303132333435363738394041#!/bin/bashread -p "Please input a number: " nif [[ -z "$n" ]]; then echo "Please input a number." exit 1ifn1=`echo $n | sed 's/[0-9]//g'`if [[ ! -z $n1 ]]; then # [[ -n $1 ]] echo 'Please input a number.' exit 1# elfi [[ $n -lt 0 ]] || [[ $n -gt 100 ]]; then# echo 'The number range is 0-100.'# exit 1fifi [[ $n -ge 0 ]] &amp;&amp; [[ $n -lt 60 ]]; then tag=1 elfi [[ $n -ge 60 ]] &amp;&amp; [[ $n -lt 80 ]]; then tag=2 elfi [[ $n -ge 80 ]] &amp;&amp; [[ $n -lt 90 ]]; then tag=3 elfi [[ $n -ge 90 ]] &amp;&amp; [[ $n -le 100 ]]; then tag=4 else tag=0ficase $tag in 1) echo 'not ok' ;; 2) echo 'ok' ;; 3|4) echo 'very ok' ;; 0) echo 'The number range is 0-100' ;;esac]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell-script</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Seafile-开源企业私有网盘升级]]></title>
    <url>%2FSeafile%2FSeafile%E5%8D%87%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[前言 ​ 本人当时搭建seafile的时候版本号是6.1.1现在版本更新到了6.3.4了，打算升级一下。文章脑袋思路不是特别有思路，写的不好希望理解。 ​ 简述一下：之前的seafile服务是搭建在192.168.1.102上的/home/seafile目录下的，之前的数据MySQL并没有放在这个机器上而是放在了192.168.1.103上。 新机器上部署原有环境（192.168.1.108） 在新机器上拉去之前的版本软件和数据 12345678910rsync -aP --exclude '*data' root@192.168.1.102:/home/seafile /home/cd /home/seafile/rm -rf ccnet/rm seafile-server-latest# 这个目录是一个软连接目录删除软连接目录的时候千万记得不要再软连接目录的后面加/不然删除的是真实目录下的所有文件# 注意：删除这两个文件只为了在搭建环境的时候不出错，出现的错误提示我会放在下面cd seafile-server-6.1.1./setup-seafile-mysql.sh# 运行安装脚本并回答预设问题 新机器上搭建原来seafile环境的常见错误 提示缺少依赖环境，根据提示运行命令 ​ 上面我们使用rm命令删除ccnet如果你删除就会提示下面错误 ​ 如果不删除seafile-server-latest链接文件会提示下面的错误 命令./setup-seafile-mysql.sh回答的问题 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147[root@localhost seafile-server-6.1.1]# ./setup-seafile-mysql.sh Checking python on this machine ... Checking python module: setuptools ... Done. Checking python module: python-imaging ... Done. Checking python module: python-mysqldb ... Done.-----------------------------------------------------------------This script will guide you to setup your seafile server using MySQL.Make sure you have read seafile server manual at https://github.com/haiwen/seafile/wikiPress ENTER to continue-----------------------------------------------------------------What is the name of the server? It will be displayed on the client.3 - 15 letters or digits# 输入之前seafile的名字[ server name ] seafile What is the ip or domain of the server?For example: www.mycompany.com, 192.168.1.101# 输入本机IP地址[ This server's ip or domain ] 192.168.1.108Where do you want to put your seafile data?Please use a volume with enough free space# 存储文件确定放在提示的目录里面吗？是直接回车[ default "/home/seafile/seafile-data" ] Which port do you want to use for the seafile fileserver?# 上下传文件要使用那个端口，默认直接回车[ default "8082" ] -------------------------------------------------------Please choose a way to initialize seafile databases:-------------------------------------------------------[1] Create new ccnet/seafile/seahub databases[2] Use existing ccnet/seafile/seahub databases# 先选择1创建新的数据库不要使用原来的[ 1 or 2 ] 1What is the host of mysql server?# 输入之前数据库的IP地址[ default "localhost" ] 192.168.1.103From which hosts could the mysql account be used?# 允许那些用户可以访问数据库[ default "%" ] What is the port of mysql server?# 确定MySQL的端口[ default "3306" ] What is the password of the mysql root user?# 输入MySQL root用户的密码[ root password ] verifying password of user root ... doneEnter the name for mysql user of seafile. It would be created if not exists.[ default "seafile" ] Enter the password for mysql user "seafile":# 输入MySQL的用户名的密码[ password for seafile ] verifying password of user seafile ... doneEnter the database name for ccnet-server:# 创建的库名，默认直接回车[ default "ccnet-db" ] Enter the database name for seafile-server:# 创建的库名，默认直接回车[ default "seafile-db" ] Enter the database name for seahub:# 创建的库名，默认直接回车[ default "seahub-db" ] ---------------------------------This is your configuration---------------------------------# 确定输入的信息是否有错，有错按ctrl+c取消再次从新输入 server name: seafile server ip/domain: 192.168.1.93 seafile data dir: /home/seafile/seafile-data fileserver port: 8082 database: create new ccnet database: ccnet-db seafile database: seafile-db seahub database: seahub-db database user: seafile---------------------------------Press ENTER to continue, or Ctrl-C to abort---------------------------------Generating ccnet configuration ...doneSuccessly create configuration dir /home/seafile/ccnet.Generating seafile configuration ...Done.doneGenerating seahub configuration ...----------------------------------------Now creating seahub database tables ...----------------------------------------creating seafile-server-latest symbolic link ... done-----------------------------------------------------------------Your seafile server configuration has been finished successfully.-----------------------------------------------------------------# 服务的启动、关闭和重启run seafile server: ./seafile.sh &#123; start | stop | restart &#125;run seahub server: ./seahub.sh &#123; start &lt;port&gt; | stop | restart &lt;port&gt; &#125;-----------------------------------------------------------------If you are behind a firewall, remember to allow input/output of these tcp ports:-----------------------------------------------------------------port of seafile fileserver: 8082port of seahub: 8000When problems occur, Refer to https://github.com/haiwen/seafile/wikifor information. 启动seafile服务 123456789101112131415161718192021222324252627282930313233343536373839[root@localhost seafile-server-6.1.1]# ./seafile.sh start[05/22/19 06:53:14] ../common/session.c(132): using config file /home/seafile/conf/ccnet.confStarting seafile server, please wait ...Seafile server startedDone.[root@localhost seafile-server-6.1.1]# ./seahub.sh startLC_ALL is not set in ENV, set to en_US.UTF-8Starting seahub at port 8000 ...----------------------------------------It's the first time you start the seafile server. Now let's create the admin account----------------------------------------What is the email for the admin account?# 输入自己的邮箱地址[ admin email ] open@163.comWhat is the password for the admin account?# 输入密码-自定义[ admin password ] Enter the password again:[ admin password again ] ----------------------------------------Successfully created seafile admin----------------------------------------Seahub is startedDone. 注意：到这里就已经算是安装好之前的环境了，你可以使用http://ip:8000访问看看是否成功。 备份数据并回复新的数据（192.168.1.103） 停止seafile服务 123cd /home/seafile/seafile-server-6.1.1./seafile.sh stop./seahub.sh stop 备份原来的数据库 123mysqldump -uroot -pPasswd lod-ccnet &gt; /tmp/ccnet.sqlmysqldump -uroot -pPasswd lod-seahub &gt; /tmp/seahub.sqlmysqldump -uroot -pPasswd lod-seafile &gt; /tmp/seafile.sql 恢复新的数据库 123mysql -uroot -pPasswd ccnet-db &lt; /tmp/ccnet.sqlmysql -uroot -pPasswd seahub-db &lt; /tmp/seahub.sqlmysql -uroot -pPasswd seafile-db &lt; /tmp/deafile.sql 安装和配置Nginx(192.168.1.108) 安装依赖的包 123456789101112131415161718192021222324cd /usr/local/src/yum install -y gcc gcc-c++ autoconf automake pcre pcre-devel openssl* zlib* libtoolwget https://github.com/jemalloc/jemalloc/releases/download/5.1.0/jemalloc-5.1.0.tar.bz2tar jxvf jemalloc-5.1.0.tar.bz2cd jemalloc-5.1.0./configure --prefix=/usr/local/jemallocmake &amp;&amp; make installuseradd -s /sbin/nologin -M nginxcd ../tar xzf tengine-2.3.0.tar.gz # 把tengine-2.3.0.tar.gz包上传到/usr/local/src/cd tengine-2.3.0./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-pcre --with-http_ssl_module --with-jemalloc=/usr/local/src/jemalloc-5.1.0/ --with-http_gzip_static_module --with-http_realip_module --with-http_stub_status_module --with-http_concat_module # 如果提示没有--with-http_concat_module模块可以不要make &amp;&amp; make install 修改nginx的配置文件 12cd /usr/local/nginx/conf/vim nginx.conf= 删除之前的文件内容写入下面的内容 1234567891011121314151617181920212223242526272829303132333435363738394041user nginx;worker_processes auto;pid logs/nginx.pid;events &#123; worker_connections 768; # multi_accept on;&#125;http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include mime.types; default_type application/octet-stream; client_max_body_size 100m; ## # Logging Settings ## access_log logs/access.log; error_log logs/error.log; include sites-enable/*;&#125; 12mkdir sites-enablevim default 写入下面的内容 注意：此处的配置是原来的配置，之前的版本是支持 ./seahub.sh start-fastcgi 启动服务。现在测试阶段配置原来的配置文件。你也可以不用测试直接使用下面的配置文件。 123456789101112131415161718192021222324252627282930313233343536373839server &#123; listen 80; server_name localhost; proxy_set_header X-Forwarded-For $remote_addr; location / &#123; fastcgi_pass 127.0.0.1:8000; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_script_name; fastcgi_param SERVER_PROTOCOL $server_protocol; fastcgi_param QUERY_STRING $query_string; fastcgi_param REQUEST_METHOD $request_method; fastcgi_param CONTENT_TYPE $content_type; fastcgi_param CONTENT_LENGTH $content_length; fastcgi_param SERVER_ADDR $server_addr; fastcgi_param SERVER_PORT $server_port; fastcgi_param SERVER_NAME $server_name; fastcgi_param REMOTE_ADDR $remote_addr; access_log logs/seahub.access.log; error_log logs/seahub.error.log; &#125; location /seafhttp &#123; rewrite ^/seafhttp(.*)$ $1 break; proxy_pass http://127.0.0.1:8082; client_max_body_size 0; proxy_connect_timeout 36000s; proxy_read_timeout 36000s; proxy_request_buffering off; &#125; location /media &#123; root /home/seafile/seafile-server-latest/seahub; &#125;&#125; 修改nginx的default配置文件 注意：升级完成之后 ./seahub.sh 是不在支持 fastcgi 方式启动的。修改完成文件之后可以直接使用 ./seafile.sh start 启动 1234567891011121314151617181920212223242526272829303132333435server &#123; listen 80; server_name localhost; proxy_set_header X-Forwarded-For $remote_addr; location / &#123; proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_read_timeout 1200s; # used for view/edit office file via Office Online Server client_max_body_size 0; access_log logs/seahub.access.log; error_log logs/seahub.error.log; &#125; location /seafhttp &#123; rewrite ^/seafhttp(.*)$ $1 break; proxy_pass http://127.0.0.1:8082; client_max_body_size 0; proxy_connect_timeout 36000s; proxy_read_timeout 36000s; proxy_request_buffering off; &#125; location /media &#123; root /home/seafile/seafile-server-latest/seahub; &#125;&#125; 开始升级seafile。具体方法请查看官方文档 ：升级 拉取数据（192.168.1.108） 把原有的文件拉回到新的机器上。 1rsync -aP root@192.168.1.205:/home/seafile/*data /home/seafile/ 修改配置文件 /home/seafile/conf/seahub_settings.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# -*- coding: utf-8 -*-SECRET_KEY = "gss=bf%!(g9t))i(pbkta4s8#$33v8a71#_t+g9)o6h20f-_fy"DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'seahub-db6', 'USER': 'seafile', 'PASSWORD': 'seafile', 'HOST': '192.168.1.208', 'PORT': '3306' &#125;&#125;##下面的这些东西是设置邮件服务器。需要填写对EMAIL_USE_TLS = FalseEMAIL_HOST = 'smtp.mxhichina.com' # smpt 服务器EMAIL_HOST_USER = 'opadmin@51signing.com' # 用户名和域名EMAIL_HOST_PASSWORD = '@bjzqkj2015col!' # 密码EMAIL_PORT = '25'DEFAULT_FROM_EMAIL = EMAIL_HOST_USERSERVER_EMAIL = EMAIL_HOST_USER###the below is 设置用户是否能注册等信息的ENABLE_SIGNUP = True ####是否开启注册ACTIVATE_AFTER_REGISTRATION = True ###注册后是否立即激活SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True ####管理员新增用户后是否给用户发送邮件SEND_EMAIL_ON_RESETTING_USER_PASSWD = True ###管理员重置用户密码后是否给用户发送邮件LOGIN_ATTEMPT_LIMIT = 3 ###用户输入密码错误次数超过改设置后，显示验证码USER_PASSWORD_MIN_LENGTH = 6 ###用户密码最小长度FORCE_PASSWORD_CHANGE = True ####管理员增加用户，第一次登录强制修改密码ENABLE_WIKI = True #是否开启个人wiki# 是否使用 pdf.js 来在线查看文件. 默认为 `True`USE_PDFJS = TrueFILE_PREVIEW_MAX_SIZE = 30 * 1024 * 1024 ##默认查看文档大小FILE_SERVER_ROOT = 'http://192.168.1.108/seafhttp'TEXT_PREVIEW_EXT = """ac, am, bat, c, cc, cmake, cpp, cs, css, diff, el, h, html,htm, java, js, json, less, make, org, php, pl, properties, py, rb,scala, script, sh, sql, txt, text, tex, vi, vim, xhtml, xml, log, csv,groovy, rst, patch, go, docx, doc""" ​ wiki的配置文件内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445server &#123; listen 81; server_name localhost;# location / &#123;# root /var/www/html;# index index.html index.htm;# &#125; #error_page 404 /404.html;# error_page 500 502 503 504 /50x.html;# location = /50x.html &#123;# root html;# &#125;# location ~*^/dokuwiki/.*$ &#123; #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。# #root path; #根目录# #index vv.txt; #设置默认页# proxy_pass http://test; #请求转向mysvr 定义的服务器列表# #deny 127.0.0.1; #拒绝的ip# #allow 172.18.5.54; #允许的ip # &#125; proxy_set_header X-Forwarded-For $remote_addr;location / &#123; root html; index index.php index.html index.htm;&#125;location ~ \.php$ &#123; root /usr/local/nginx/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php;# fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params;&#125;&#125; 注意：完成之后去前段页面的 系统设置 -&gt; 设置 -&gt; FILE_SERVER_ROOT 里面把IP地址改成本机的]]></content>
      <categories>
        <category>Seafile</category>
      </categories>
      <tags>
        <tag>Seafile升级</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Zabbix监控软件]]></title>
    <url>%2FLinux%E9%AB%98%E7%BA%A7%2F%E5%AE%89%E8%A3%85zabbix%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Zabbix监控介绍 C/S架构，基于C++开发，监控中心支持web界面配置和管理 单server节点可以支持上万台客户端 最新版本4.0，官方文档：Zabbix官网 Zabbix包括5个组件 zabbix-server监控中心，接收客户端上报信息，负责配置、统计、操作数据 数据存储 存放数据，比如mysql web界面 也叫web UI，在web界面下操作配置zabbix简单易用的主要原因 zabbix-proxy 可选组件，它可以代替zabbix-server的功能，减轻server的压力 zabbix-agent 客户端软件，负责采集各个监控服务或者项目的数据，并上报 Zabbix监控流程图zabbix-release-3.2-1.el7.noarch.rpm 安装Zabbix上（服务端配置） 官网下载地址 阿铭在下载的时候地址是zabbix的index 123wget repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpmrpm -ivh zabbix-release-3.2-1.el7.noarch.rpm #首先我们下载了zabbix的release的rpm包，然后安装zabbix的yum源仓库yum install -y zabbix-agent zabbix-get zabbix-server-mysql zabbix-web zabbix-web-mysql 会连带安装httpd和php 如果MySQL之前没有安装的话，需要根据lamp那一章的MySQL安装方法安装MySQL。一样也可以是使用yum安装mysql和mariadb vim /etc/my.cnf //需要增加配置 1character_set_server = utf8 重启MySQL服务后，进入MySQL命令行 1234#创建zabbix库create database zabbix character set utf8;#在创建用户grant all on zabbix.* to &apos;zabbix&apos;@&apos;127.0.0.1&apos; identified by &apos;guo123456&apos;; //(生产环境中如果为了提高效率你可以吧MySQL单装一台服务器)创建的用户IP地址为来源IP 导入数据 123cd /usr/share/doc/zabbix-server-mysql-3.2.7gzip -d create.sql.gzmysql -uroot -pgaoyidi zabbix &lt; create.sql 123456systemctl enable httpdsystemctl enable zabbix-serverchkconfig nginx offps -ef|grep zabbix //查看一下进程netstat -lntp zabbix //查看一下坚挺的端口less /var/log/zabbix/zabbix_server.log //zabbix错误日志路径 12345678910vim /etc/zabbix/zabbix_server.conf#搜索DBHost在#DBhost=localhost下面增加DBHost=127.0.0.1#搜索DBName在DBName=zabbix定义用户为zabbix(这里正好是默认的)#搜索DBPassword在DBUser=zabbix下面增加DBPassword=guo123456systemctl start zabbix-serversystemctl enable zabbix-servernetstat -lntp|grep zabbix //查看监听端口#浏览器访问http://ip/zabbinx web界面下面的配置zabbix#用户名Admin 密码zabbix#进入后台第一件事情就是修改密码 在浏览器里面输入IP/zabbix 点击Next step 是ok的就不用管出现fail的需要修改配置文件 这里出现的文件错误是让你设置时区 1234vim /etc/php.ini#搜索timezoen在;date.timezone = 增加date.timezone = Asia/Shanghaisystemctl restart httpd#重启服务之后在浏览器里面刷新 创建完成之后就是登入，默认用户是Admin，默认密码是zabbix。登入之后第一件事就是修改用户密码 点击Administration -&gt;点击Users -&gt; 点击Admin用户 -&gt; 点击Password处的Change password -&gt; 输入新的密码 ，你也可以修改中文语言点击Language选择Chinese （zh_CN），建议大家使用英文 -&gt; 点击update保存 下图就是zabbix的web界面 下 （客户端配置） 在客户端上需要下载zabbix的yum源 123456789wget repo.zabbix.com/zabbix/3.2/rhel/7/x86_64/zabbix-release-3.2-1.el7.noarch.rpmrpm -ivh zabbix-release-3.2-1.el7.noarch.rpmyum install -y zabbix-agentvim /etc/zabbix/zabbix_agentd.conf //修改如下配置#搜索Server=127.0.0.1修改成Server=192.168.107.101 //定义服务端的ip（被动模式）#搜索ServerActive=127.0.0.1修改成ServerActive=192.168.107.101 //定义服务端ip（主动模式）#搜索Hostname=Zabbix server修改成Hostname=guo-123 //这是自定义的主机名，一会还需要在web界面下设置同样的主机名systemctl start zabbix-agentsystemctl enable zabbix-agent 主动模式和被动模式 主动或被动是相对客户端来讲的 被动模式：服务端会主动连接客户端获取监控项目数据，客户端被动地接受连接，并把监控信息传递给服务端 主动模式：客户端会主动吧监控数据汇报给服务端，服务端只负责接受即可 当客户端数量非常多时，建议使用主动模式，这样可以降低服务为的压力 服务端有公网ip。客户端只用内网ip，但却能连接外网，这种场景适合主动模式 忘记Admin用户的密码怎么做 进入MySQL命令行，选择zabbix库 1mysql -uroot -pgaoyadi 123use zabbix;update users set passwd=md5(&apos;newpasswd&apos;) where alias=&apos;Admin&apos;;#这样就可以修改Admin用户的密码]]></content>
      <categories>
        <category>Linux高级</category>
      </categories>
      <tags>
        <tag>Linux监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[私有化部署-安装FastDFS应用]]></title>
    <url>%2FFastDFS%E5%BA%94%E7%94%A8%2F%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2-%E5%AE%89%E8%A3%85FastDFS%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[安装依赖包1yum install make cmake gcc gcc-c++ 安装 libfastcommon (所有服务器上)上传安装libfastcommon 将包 libfastcommon-master.zip 上传到/usr/local/src 目录，并解压 12345cd /usr/local/src/unzip libfastcommon-master.zipcd libfastcommon-master./make.sh./make.sh install 创建软链接​ 因为 FastDFS 主程序设置的 lib 目录是/usr/local/lib，所以需要创建软链接。 1234ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.soln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.soln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so ​ 注意：此处不要惊讶为什么没有libfdfsclient.so，因为还没有安装，安装FastDFS之后，这个文件就会被创建的。 安装FastDFS​ FastDFS安装包可以在众签提供的源码包中找到，也可以自行从网上下载，版本是：FastDFS_v5.05.tar.gz 上传安装FastDFS 将FastDFS 源码包上传到服务器的 /usr/local/src 目录，并解 压 12345cd /usr/local/src/tar -zxvf FastDFS_v5.05.tar.gzcd FastDFS./make.sh./make.sh install FastDFS的文件介绍 以上是采用默认的方式安装的FastDFS，安装后相应的服务脚本、命令和启动文件如下： a. 服务脚本文件的路径是： 12/etc/init.d/fdfs_storaged/etc/init.d/fdfs_tracker ​ b. 配置文件的路径是： 123/etc/fdfs/client.conf.sample/etc/fdfs/storage.conf.sample/etc/fdfs/tracker.conf.sample ​ c. 命令文件的路径是： 1234567891011121314/usr/bin/fdfs_append_file /usr/bin/fdfs_appender_test /usr/bin/fdfs_appender_test1 /usr/bin/fdfs_crc32 /usr/bin/fdfs_delete_file /usr/bin/fdfs_download_file /usr/bin/fdfs_file_info /usr/bin/fdfs_monitor /usr/bin/fdfs_storaged /usr/bin/fdfs_test /usr/bin/fdfs_test1 /usr/bin/fdfs_trackerd/usr/bin/fdfs_upload_appender/usr/bin/fdfs_upload_file 修改服务脚本文件 因为FastDFS采用默认方式安装，服务脚本文件中默认配置的FastDFS命令文件路径是/usr/local/bin，但是默认方式安装的命令文件实际路径如上所展示，目录是/usr/bin ，所以需要修改服务脚本中的命令了路径，修改方式如下： 1234#修改tracker服务脚本sed -i 's/usr\/local\/bin/usr\/bin/g' /etc/init.d/fdfs_trackerd#修改storage服务脚本sed -i 's/usr\/local\/bin/usr\/bin/g' /etc/init.d/fdfs_storaged 配置FastDFS追踪器tracker修改tracker配置文件12345678910#cd /etc/fdfs/#创建tracker配置文件cp tracker.conf.sample tracker.conf#修改配置文件vi /etc/fdfs/tracker.conf###将文件中的相应项修改为如下内容disabled=false port=22122base_path=/home/fastdfs/tracker 创建FastDFS存储路径1mkdir –p /home/fastdfs/tracker 修改防火墙，放开tracker端口​ 注：此服务端口，不需要被外网访问，请在防火墙中禁止此端口被外网访问，但是此端口一定要允许内网中可以访问，调整防火墙是为了让此服务被内网服务访问。 ​ 以本机iptables为例 12345678#vi /etc/sysconfig/iptables#修改内容如下#下方内容为放开本服务器的22122端口吗，如果此主机有外网，外网也能访问-A INPUT -m state --state NEW -m tcp -p tcp --dport 22122 -j ACCEPT#下方内容为仅对-s后ip或者网段的主机或者主机端，放开本服务器的22122端口-A INPUT -p tcp -s 192.168.0.0/16 --dport 22122 -j ACCEPT##重启防火墙，使配置生效。service iptables restart 启动tracker服务，并检查是否正常启动​ 使用如下两种命令之一启动tracker服务 123service fdfs_trackerd restart#或者/etc/init.d/fdfs_trackerd start ​ 方式一：启动服务后，在目录/home/fastdfs/tracker目录下会看到一个data、logs目录，通过一下命令观察tracker是否启动成功 1tail -20f /home/fastdfs/tracker/logs/trackerd.log 当看到以上信息的时候表示tracker已经正常启动 ​ 方式二：执行命令 123netstat -unltp|grep fdfs或ss -ntlp |grep fdfs ​ 能出现以上信息，也能表示启动FastDFS的tracker服务启动成功。 设置 FastDFS 跟踪器开机启动123456vi /etc/rc.d/rc.local#将以下内容填入文件末尾## FastDFS Tracker/etc/init.d/fdfs_trackerd start 配置FastDFS存储器storage修改storage配置文件12345678910111213141516#cd /etc/fdfs/#创建storage配置文件cp storage.conf.sample storage.conf#修改配置文件vi /etc/fdfs/storage.conf###将文件中的相应项修改为如下内容disabled=false group_name=group1port=23000base_path=/home/fastdfs/storagestore_path0=/home/fastdfs/storagestore_path_count=1tracker_server=192.168.1.131:22122#（如果有多个tracker的话，可以在这个配置中填写多个tracker，写法如同现在的写法）tracker_server=192.168.1.132:22122http.server_port=8888 #(后续安装的nginx端口需要更改为8888，这样就可以通过nginx服务在web浏览器中查看存储的文件了) 创建FastDFS存储路径1mkdir –p /home/fastdfs/storage 修改防火墙，放开storage端口 ​ 注：此服务端口，不需要被外网访问，请在防火墙中禁止此端口被外网访问，但是此端口一定要允许内网中可以访问，调整防火墙是为了让此服务被内网服务访问。 ​ 以本机iptables为例 12345678#vi /etc/sysconfig/iptables#修改内容如下#下方内容为放开本服务器的23000端口吗，如果此主机有外网，外网也能访问-A INPUT -m state --state NEW -m tcp -p tcp --dport 23000 -j ACCEPT#下方内容为仅对-s后ip或者网段的主机或者主机端，放开本服务器的23000端口-A INPUT -p tcp -s 192.168.0.0/16 --dport 23000 -j ACCEPT##重启防火墙，使配置生效。service iptables restart 启动tracker服务，并检查是否正常启动​ 使用如下两种命令之一启动tracker服务 123service fdfs_storaged restart#或/etc/init.d/fdfs_storaged start ​ 方式一：启动服务后，在目录/home/fastdfs/storaged目录下会看到一个data、logs目录，通过一下命令观察tracker是否启动成功 1tail -20f /home/fastdfs/storage/logs/storaged.log 当看到以上信息的时候表示storage已经正常启动 当然也可以查看下tracker的日志，已经发生了变化，变化如下 ​ 方式二：执行命令 123netstat -unltp|grep fdfs#或ss -ntlp |grep fdfs ​ 能出现以上信息，也能表示启动FastDFS的stroage服务启动成功。 设置 FastDFS 存储器开机启动1234vi /etc/rc.d/rc.local#将以下内容填入文件末尾# FastDFS Tracker/etc/init.d/fdfs_storaged start 检查集群信息1/usr/bin/fdfs_monitor /etc/fdfs/storage.conf 使用以上命令，可以看到整个FastDFS集群的storage的分组以及组中storge的个数。如下图 ​ 利用文件上传测试服务安装是否成功修改tracker服务器中的客户端配置文件client.conf1234567#从模板创建配置文件cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf#修改配置文件vi /etc/fdfs/client.conf base_path=/fastdfs/trackerbase_path=/fastdfs/trackertracker_server=192.168.1.131:22122tracker_server=192.168.1.132:22122 执行命令上传一个文件1/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /usr/local/src/FastDFS_v5.05.tar.gz 如果上传成功会返回一个ID号如下： 1group1/M00/00/00/wKgBh1Xtr9-AeTfWAAVFOL7FJU4.tar.gz 可以去/home/fastdfs/storage/data/00/00/目录中找到此名称为wKgBh1Xtr9-AeTfWAAVFOL7FJU4.tar.gz的文件。 在存储节点安装nginx服务。fastdfs-nginx-module 作用说明 FastDFS 通过 Tracker 服务器,将文件放在 Storage 服务器存储，但是同组存储服务器之间需要进入文件复制，有同步延迟的问题。假设 Tracker 服务器将文件上传到了 存储器中的一台如sg1，上传成功后文件 ID已经返回给客户端。此时 FastDFS 存储集群机制会将这个文件同步到同组存储sg2，在文件还没有复制完成的情况下，客户端如果用这个文件 ID 在 sg2 上取文件,就会出现文件无法访问的错误。而 fastdfs-nginx-module 可以重定向文件连接到源服务器取文件,避免客户端由于复制延迟导致的文件无法访问错误。（解压后的 fastdfs-nginx-module 在 nginx 编译安装时使用） 上传fastdfs-nginx模块 将fastdfs-nginx-module_v1.16.tar.gz 到/usr/local/src，解压 12# cd /usr/local/src/# tar -zxvf fastdfs-nginx-module_v1.16.tar.gz 修改 fastdfs-nginx模块的配置文件12345# vi /usr/local/src/fastdfs-nginx-module/src/configCORE_INCS="$CORE_INCS /usr/local/include/fastdfs /usr/local/include/fastcommon/"#修改为：CORE_INCS="$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/"#（注意：这个路径修改是很重要的，不然在 nginx 编译的时候会报错的） 上传Nginx源码包 将当前的稳定版本 Nginx上传到到/usr/local/src 目录 ​ 可以从官方网站下载最新版本（文档书写时最新稳定版是https://nginx.org/download/nginx-1.14.0.tar.gz）。文档是使用的版本是nginx-1.14.0.tar.gz 安装编译 Nginx 所需的依赖包1# yum install gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel 编译安装 Nginx 添加 fastdfs-nginx-module 模块 12345cd /usr/local/src/tar -zxvf nginx-1.14.0.tar.gzcd nginx-1.14.0./configure --prefix=/usr/local/nginx --add-module=/usr/local/src/fastdfs-nginx-module/src# make &amp;&amp; make install 复制 fastdfs-nginx-module 源码中的配置文件到/etc/fdfs 目录 上传配置文件并修改 12345678910111213141516171819202122232425cp /usr/local/src/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/vi /etc/fdfs/mod_fastdfs.conf#(1)第一组 Storage 的 mod_fastdfs.conf 配置如下：connect_timeout=10base_path=/tmptracker_server=192.168.1.131:22122tracker_server=192.168.1.132:22122storage_server_port=23000group_name=group1url_have_group_name = truestore_path0=/fastdfs/storagegroup_count = 2[group1]group_name=group1storage_server_port=23000store_path_count=1store_path0=/fastdfs/storage[group2]group_name=group2storage_server_port=23000store_path_count=1store_path0=/fastdfs/storage#(2)第一组 Storage 的 mod_fastdfs.conf 配置与第一组配置只有 group_name 不同：group_name=group2 以上是按照两个group组来，实际操作过程中，如果只有一个组可以做如下修改 12345678910111213141516vi /etc/fdfs/mod_fastdfs.conf#(1)第一组 Storage 的 mod_fastdfs.conf 配置如下：connect_timeout=10base_path=/tmptracker_server=192.168.1.131:22122tracker_server=192.168.1.132:22122storage_server_port=23000group_name=group1url_have_group_name = truestore_path0=/fastdfs/storagegroup_count = 1[group1]group_name=group1storage_server_port=23000store_path_count=1store_path0=/fastdfs/storage 复制 FastDFS 的部分配置文件到/etc/fdfs 目录12cd /usr/local/src/FastDFS/confcp http.conf mime.types /etc/fdfs/ 在/fastdfs/storage 文件存储目录下创建软连接,将其链接到实际存放数据的目录 1ln -s /fastdfs/storage/data/ /fastdfs/storage/data/M00 修改 Nginx配置文件，简洁版 nginx 配置样例12345678910111213141516171819202122232425#vi /usr/local/nginx/conf/nginx.confuser root;worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server &#123; listen 8888; server_name localhost; location ~/group([0-9])/M00 &#123; #alias /fastdfs/storage/data; ngx_fastdfs_module; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; ​ 注意： ​ 8888端口要与/etc/fdfs/storage.conf 中的 http.server_port=8888 相对应 ​ nginx.conf第一行的user 一定要写成root 修改防火墙，放开NGINX端口​ 注：此服务端口，不需要被外网访问，请在防火墙中禁止此端口被外网访问，但是此端口一定要允许内网中可以访问，调整防火墙是为了让此服务被内网服务访问。 ​ 以本机iptables为例 123456#vi /etc/sysconfig/iptables#修改内容如下#下方内容为放开本服务器的8888端口吗，如果此主机有外网，外网也能访问-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT#下方内容为对-s后ip或者网段的主机或者主机端，放开本服务器的8888端口-A INPUT -p tcp -s 192.168.0.0/16 --dport 8888 -j ACCEPT ​ 重启防火墙，使配置生效。 1service iptables restart 启动NGINX1/usr/local/nginx/sbin/nginx 在控制台会出现以下内容 1ngx_http_fastdfs_set pid=xxx （重启 Nginx 的命令为：/usr/local/nginx/sbin/nginx -s reload） NGINX加入开机启动123vi /etc/rc.local#在末尾加入以下内容/usr/local/nginx/sbin/nginx 通过浏览器测试访问6.2步骤中上传的文件wget http://127.0.0.1:8888/group1/M00/00/00/wKgBh1Xtr9-AeTfWAAVFOL7FJU4.tar.gz 如果能获取到此文件，表示配置成功 ​ 至此，配置FastDFS已经完成。 软件下载地址放在本文的下方的评论区]]></content>
      <categories>
        <category>FastDFS应用</category>
      </categories>
      <tags>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FastDFS介绍]]></title>
    <url>%2FFastDFS%E5%BA%94%E7%94%A8%2FFastDFS-%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[FastDFS 介绍​ FastDFS 是一个开源的分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。​ FastDFS 服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。存储节点存储文件，完成文件管理的所有功能：存储、同步和提供存取接口，FastDFS 同时对文件的 meta data 进行管理。所谓文件的 meta data 就是文件的相关属性，以键值对（key value pair）方式表示，如：width=1024，其中的 key 为 width，value 为 1024。文件 meta data 是文件属性列表，可以包含多个键值对。FastDFS 系统结构如下图所示： ​ 跟踪器和存储节点都可以由一台多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。​ 为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。FastDFS 中的文件标识分为两个部分：卷名和文件名，二者缺一不可。 FastDFS 上传文件交互过程： client 询问 tracker 上传到的 storage，不需要附加参数。 tracker 返回一台可用的 storage。 client 直接和 storage 通讯完成文件上传。客户端 client 发起对 FastDFS 的文件传输动作，是通过连接到某一台 Tracker Server 的指定端口来实现的，Tracker Server 根据目前已掌握的信息，来决定选择哪一台 Storage Server ，然后将这个Storage Server 的地址等信息返回给 client，然后 client 再通过这些信息连接到这台 Storage Server，将要上传的文件传送到给 Storage Server 上。 FastDFS 下载文件交互过程： client 询问 tracker 下载文件的 storage，参数为文件标识（卷名和文件名）。 tracker 返回一台可用的 storage。 client 直接和 storage 通讯完成文件下载。 FastDFS 集群规划：跟踪服务器 1：192.168.1.131 edu-dfs-tracker-1 跟踪服务器 2：192.168.1.132 edu-dfs-tracker-2 存储服务器 1：192.168.1.135 edu-dfs-storage-group1-1 存储服务器 2：192.168.1.136 edu-dfs-storage-group1-2 存储服务器 3：192.168.1.137 edu-dfs-storage-group2-1 存储服务器 4：192.168.1.138 edu-dfs-storage-group2-2 环境：CentOS 6.6 用户：root 数据目录：/fastdfs （注：数据目录按你的数据盘挂载路径而定） 安装包（随视频压缩包提供）： FastDFS v5.05 libfastcommon-master.zip（是从 FastDFS 和 FastDHT 中提取出来的公共 C 函数库） fastdfs-nginx-module_v1.16.tar.gz nginx-1.6.2.tar.gz fastdfs_client_java._v1.25.tar.gz 源码地址：https://github.com/happyfish100/ 下载地址：http://sourceforge.net/projects/fastdfs/files/ 官方论坛：http://bbs.chinaunix.net/forum-240-1.html 本教程的 FastDFS 文件系统集群的最终结构图 搭建教程地址]]></content>
      <categories>
        <category>FastDFS应用</category>
      </categories>
      <tags>
        <tag>FastDFS</tag>
      </tags>
  </entry>
</search>
